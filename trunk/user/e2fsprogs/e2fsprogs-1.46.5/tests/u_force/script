test_description="e2undo force"
if test -x $E2UNDO_EXE; then

TDB_FILE=${TMPDIR:-/tmp}/tune2fs-$(basename $TMPFILE).e2undo
OUT=$test_name.log
rm -f $TDB_FILE >/dev/null 2>&1

dd if=/dev/zero of=$TMPFILE bs=1k count=512 > /dev/null 2>&1

echo mke2fs -q -F -o Linux -T ext4 -O ^metadata_csum,64bit -E lazy_itable_init=1 -b 1024 $TMPFILE  > $OUT
$MKE2FS -q -F -o Linux -T ext4 -O ^metadata_csum,64bit -E lazy_itable_init=1 -b 1024 $TMPFILE  >> $OUT 2>&1
crc0=`$CRCSUM $TMPFILE`
echo $CRCSUM before tune2fs $crc0 >> $OUT

echo using tune2fs to test e2undo >> $OUT
$TUNE2FS -O metadata_csum -z $TDB_FILE $TMPFILE >> $OUT 2>&1
crc1=`$CRCSUM $TMPFILE`
echo $CRCSUM after tune2fs $crc1 >> $OUT

dd if=/dev/zero of=$TDB_FILE bs=4 count=1 seek=127 conv=notrunc 2> /dev/null

$E2UNDO $TDB_FILE $TMPFILE  >> $OUT 2>&1
crc2=`$CRCSUM $TMPFILE`
echo $CRCSUM after e2undo $crc2 >> $OUT

$E2UNDO -f $TDB_FILE $TMPFILE  >> $OUT 2>&1
crc3=`$CRCSUM $TMPFILE`
echo $CRCSUM after e2undo -f $crc3 >> $OUT

MUST_FSCK=$($DUMPE2FS $TMPFILE 2> /dev/null | grep 'Filesystem state:.*not clean' -c )

if [ $MUST_FSCK -eq 1 ] && [ $crc0 != $crc3 ] && [ $crc1 = $crc2 ] && [ $crc2 != $crc0 ]; then
	echo "$test_name: $test_description: ok"
	touch $test_name.ok
else
	ln -f $test_name.log $test_name.failed
	echo "$test_name: $test_description: failed"
fi
rm -f $TDB_FILE $TMPFILE
fi
